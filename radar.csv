name,ring,quadrant,isNew,description
Version control for all production artifacts,Ring 2,Engineering,TRUE,"The comprehensive use of version control is relatively uncontroversial. We asked if respondents were keeping application code, system configuration, application configuration, and scripts for automating build and configuration in version control. These factors together predict IT performance and form a key component of continuous delivery. What was most interesting was that keeping system and application configuration in version control was more highly correlated with software delivery performance than keeping application code in version control. Configuration is normally considered a secondary concern to application code in configuration management, but research shows that this is a misconception."
Automate deployment process,Ring 2,Engineering,TRUE,"A deployment pipeline is, in essence, an automated implementation of your application’s build, deploy, test and release process."
Implement Continuous Integration,Ring 2,Engineering,TRUE,"Continuous integration (CI) is the first step towards continuous delivery. This is a development practice where code is regularly checked in, and each check-in triggers a set of quick tests to discover serious regressions, which developers fix immediately. The CI process creates canonical builds and packages that are ultimately deployed and released."
Trunk-based development,Ring 2,Engineering,TRUE,"Trunk-based development has been shown to be a predictor of high performance in software development and delivery. It is characterized by fewer than three active branches in a code repository; branches and forks having very short lifetimes (e.g., less than a day) before being merged into master; and application teams rarely or never having “code lock” periods when no one can check in code or do pull requests due to merging conflicts, code freezes, or stabilization phases."
Test Automation,Ring 2,Engineering,TRUE,"Having automated tests that are reliable: when the automated tests pass, teams are confident that their software is releasable. Furthermore, they are confident that test failures indicate a real defect. Too many test suites are flaky and unreliable, producing false positives and negatives—it’s worth investing ongoing effort into a suite that is reliable.  
Developers primarily create and maintain acceptance tests, and they can easily reproduce and fix them on their development workstations. It’s interesting to note that having automated tests primarily created and maintained either by QA or an outsourced party is not correlated with IT performance. The theory behind this is that when developers are involved in creating and maintaining acceptance tests, there are two important effects. First, the code becomes more testable when developers write tests. This is one of the main reasons why test-driven development (TDD) is an important practice—it forces developers to create more testable designs. Second, when developers are responsible for the automated tests, they care more about them and will invest more effort into maintaining and fixing them."
Test data management,Ring 2,Engineering,TRUE,"Test data requires careful maintenance, and test data management is becoming an increasingly important part of automated testing. Effective practices include having adequate data to run your test suite, the ability to acquire necessary data on demand, the ability to condition your test data in your pipeline, and the data not limiting the amount of tests you can run. We do caution, however, that teams should minimize, whenever possible, the amount of test data needed to run automated tests."
Shift left on security,Ring 2,Engineering,TRUE,"Integrating security into the design and testing phases of the software development process is key to driving IT performance. This includes conducting security reviews of applications, including the infosec team in the design and demo process for applications, using preapproved security libraries and packages, and testing security features as a part of the automated testing suite."
Implement Continuous Delivery,Ring 2,Engineering,TRUE,"CD is a development practice where software is in a deployable state throughout its lifecycle, and the team prioritizes keeping the software in a deployable state over working on new features. Fast feedback on the quality and deployability of the system is available to all team members, and when they get reports that the system isn’t deployable, fixes are made quickly. Finally, the system can be deployed to production or end users at any time, on demand. "
Loosely coupled,Ring 2,Engineering,TRUE,"This affects the extent to which a team can test and deploy their applications on demand, without requiring orchestration with other services. Having a loosely coupled architecture allows your teams to work independently, without relying on other teams for support and services, which in turn enables them to work quickly and deliver value to the organization.
If we achieve a loosely coupled, well-encapsulated architecture with an organizational structure to match, two important things happen. First, we can achieve better delivery performance, increasing both tempo and stability while reducing the burnout and the pain of deployment. Second, we can substantially grow the size of our engineering organization and increase productivity linearly—or better than linearly—as we do so."
Empowered teams choose the right tool for the job,Ring 2,Engineering,TRUE,
Gather and implement customer feedback,Ring 2,Product,TRUE,
Make flow of work visible throughout the value stream,Ring 2,Lean,TRUE,"Teams should have a good understanding of and visibility into the flow of work from the business all the way through to customers, including the status of products and features."
"work in small batches but avoid ""work break down""",Ring 2,Lean,TRUE,"Teams should slice work into small pieces that can be completed in a week or less. The key is to have work decomposed into small features that allow for rapid development, instead of developing complex features on branches and releasing them infrequently. This idea can be applied at the feature and the product level. (An MVP is a prototype of a product with just enough features to enable validated learning about the product and its business model.) Working in small batches enables short lead times and faster feedback loops."
Foster and enable team experimentation,Ring 2,Product,TRUE,"Team experimentation is the ability of developers to try out new ideas and create and update specifications during the development process, without requiring approval from outside of the team, which allows them to innovate quickly and create value. This is particularly impactful when combined with working in small batches, incorporating customer feedback, and making the flow of work visible."
Lighweight change approval process,Ring 2,Lean,TRUE,
Monitor across app/nfra to inform business decisions,Ring 2,Engineering,TRUE,Use data from application and infrastructure monitoring tools to take action and make business decisions. This goes beyond paging people when things go wrong.
Check system health proactively,Ring 2,Engineering,TRUE,"Monitor system health, using threshold and rate-of-change warnings, to enable teams to preemptively detect and mitigate problems."
Improve process and manage work with WIP limits,Ring 2,Lean,TRUE,"The use of work-in-process limits to manage the flow of work is well known in the Lean community. When used effectively, this drives process improvement, increases throughput, and makes constraints visible in the system."
Visualize work to monitor quality and communicatio throughout team,Ring 2,Lean,TRUE,"Visual displays, such as dashboards or internal websites, used to monitor quality and work in process have been shown to contribute to software delivery performance."
Support a generative culture,Ring 2,Culture,TRUE,"This measure of organizational culture is based on a typology developed by Ron Westrum, a sociologist who studied safety-critical complex systems in the domains of aviation and healthcare. Our research has found that this measure of culture is predictive of IT performance, organizational performance, and decreasing burnout. Hallmarks of this measure include good information flow, high cooperation and trust, bridging between teams, and conscious inquiry."
Encourage and support learning,Ring 2,Culture,TRUE,
Support and facilitate collaboratoin among teams,Ring 2,Culture,TRUE,
Provide tools and resources that make work more meaningful,Ring 2,Culture,TRUE,"This particular measure of job satisfaction is about doing work that is challenging and meaningful, and being empowered to exercise your skills and judgment. It is also about being given the tools and resources needed to do your job well."
Support or embody transformational leadership,Ring 2,Culture,TRUE,"Transformational leadership supports and amplifies the technical and process work that is so essential in DevOps. It is comprised of five factors: vision, intellectual stimulation, inspirational communication, supportive leadership, and personal recognition."
Responsibility Process,Ring 2,Culture,TRUE,
Outcomes over Outputs,Ring 2,Product,TRUE,
OKR,Ring 2,Product,TRUE,
Dual Track Agile,Ring 2,Product,TRUE,
Story Mapping,Ring 2,Product,TRUE,
Opportunity Canvas,Ring 2,Product,TRUE,
Jobs To be Done,Ring 2,Product,TRUE,
